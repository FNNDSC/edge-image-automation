---
- name: Check for existing blueprints
  ansible.builtin.shell: >-
    composer-cli blueprints show {{ blueprint.name }} -j | jq -r '.[].body.blueprints[].version'
  register: blueprint_versions
  failed_when: false
  changed_when: false

- name: Load the blueprints into osbuild
  when:
    - blueprint.version not in blueprint_versions.stdout_lines
  block:
    - name: Template the blueprint to disk
      ansible.builtin.template:
        src: blueprint.toml.j2
        dest: "{{ build_dir }}/{{ blueprint.name }}.toml"

    - name: Push the blueprint to osbuild
      ansible.builtin.command:
        argv:
          - /usr/bin/composer-cli
          - blueprints
          - push
          - "{{ build_dir }}/{{ blueprint.name }}.toml"

- name: Check for parent existence
  ansible.builtin.stat:
    path: "{{ commit_repo_dir }}/{{ blueprint.name }}/repo"
  register: repo_dir

- name: Start compose
  infra.osbuild.start_compose:
    blueprint: "{{ blueprint.name }}"
    compose_type: edge-commit
    ostree_ref: "{{ 'rhel/9/x86_64/edge' if repo_dir.stat.exists else omit }}"
    ostree_parent: "{{ 'rhel/9/x86_64/edge' if repo_dir.stat.exists else omit }}"
    ostree_url: "{{ 'http://localhost:'+(httpd.port|string)+'/repo' if repo_dir.stat.exists else omit }}"
    allow_duplicate: false
  register: builder_compose

- name: Update ostree remote
  when: builder_compose.changed
  block:
    - name: Identify the compose
      ansible.builtin.set_fact:
        compose_id: '{{ builder_compose["result"]["body"]["build_id"] }}'

    - name: Wait for compose to finish
      infra.osbuild.wait_compose:
        compose_id: "{{ compose_id }}"
        timeout: 3600

    - name: Ensure directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ commit_repo_dir }}/{{ blueprint.name }}"
        - "{{ build_dir }}"

    - name: Export the commit
      infra.osbuild.export_compose:
        compose_id: "{{ compose_id }}"
        dest: "{{ build_dir }}/{{ compose_id }}-commit.tar"

    - name: Unpack the edge-commit to the web root
      ansible.builtin.unarchive:
        src: "{{ build_dir }}/{{ compose_id }}-commit.tar"
        dest: "{{ commit_repo_dir }}/{{ blueprint.name }}"
        remote_src: yes

    - name: Remove the edge commit tar
      ansible.builtin.file:
        path: "{{ build_dir }}/{{ compose_id }}-commit.tar"
        state: absent

- name: Generate the kickstart file
  ansible.builtin.template:
    src: kickstart.cfg.j2
    dest: "{{ commit_repo_dir }}/{{ blueprint.name }}.cfg"
  register: kickstart_gen

- name: Check for the boot iso
  ansible.builtin.stat:
    path: "{{ commit_repo_dir }}/{{ boot_iso_name }}"
  register: boot_iso

- name: Fail if no boot iso present
  ansible.builtin.fail:
    msg: Please download {{ boot_iso_name }} and place it in {{ commit_repo_dir }} to build installer.
  when:
    - not boot_iso.stat.exists

- name: Remove installer iso
  ansible.builtin.file:
    path: "{{ commit_repo_dir }}/{{ blueprint.name }}.iso"
    state: absent
  when:
    - kickstart_gen.changed

- name: Generate installer iso
  ansible.builtin.command:
    argv:
      - /usr/bin/mkksiso
      - --ks
      - "{{ commit_repo_dir }}/{{ blueprint.name }}.cfg"
      - "{{ commit_repo_dir }}/{{ boot_iso_name }}"
      - "{{ commit_repo_dir }}/{{ blueprint.name }}.iso"
    creates: "{{ commit_repo_dir }}/{{ blueprint.name }}.iso"
